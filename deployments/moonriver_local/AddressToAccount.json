{
  "address": "0x8F8F6B104190a4A24CcFf7B4006Ea7A59baeAf81",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "AddressToSubstrateAccount",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "src",
          "type": "bytes"
        }
      ],
      "name": "blake2bHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "des",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6595333580d184f9d3cf340252671d897fc342a2e8fe8449c9471649678108a4",
  "receipt": {
    "to": null,
    "from": "0x573394b77fC17F91E9E67F147A9ECe24d67C5073",
    "contractAddress": "0x8F8F6B104190a4A24CcFf7B4006Ea7A59baeAf81",
    "transactionIndex": 0,
    "gasUsed": "493359",
    "logsBloom": "0x
    "blockHash": "0xbdd2e64cd547fcdbb3775b3c57c6d147fabfe3c8c52bbacfdf50223ae1fae7e0",
    "transactionHash": "0x6595333580d184f9d3cf340252671d897fc342a2e8fe8449c9471649678108a4",
    "logs": [],
    "blockNumber": 34,
    "cumulativeGasUsed": "493359",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7d3d40590162c17cf0cbd73fca48ee0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressToSubstrateAccount\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"}],\"name\":\"blake2bHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"des\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/AddressToAccount.sol\":\"AddressToAccount\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/AddressToAccount.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Blake2b.sol\\\";\\n\\nlibrary AddressToAccount {\\n    using Blake2b for Blake2b.Instance;\\n\\n    function blake2bHash(bytes memory src) public view returns (bytes32 des) {\\n        Blake2b.Instance memory instance = Blake2b.init(hex\\\"\\\", 32);\\n        return abi.decode(instance.finalize(src), (bytes32));\\n    }\\n\\n    function AddressToSubstrateAccount(\\n        address addr\\n    ) public view returns (bytes32 account) {\\n        bytes memory prefix = bytes(\\\"evm:\\\");\\n        bytes memory addrBytes = abi.encodePacked(addr);\\n        bytes memory data = abi.encodePacked(prefix, addrBytes);\\n        return blake2bHash(data);\\n    }\\n}\\n\",\"keccak256\":\"0xfa01044cb7e521da112383416c0f7772eba453695dff7527c7baa8329282c9ab\",\"license\":\"Apache-2.0\"},\"contracts/utils/Blake2b.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nlibrary Blake2b {\\n    struct Instance {\\n        // This is a bit misleadingly called state as it not only includes the Blake2 state,\\n        // but every field needed for the \\\"blake2 f function precompile\\\".\\n        //\\n        // This is a tightly packed buffer of:\\n        // - rounds: 32-bit BE\\n        // - h: 8 x 64-bit LE\\n        // - m: 16 x 64-bit LE\\n        // - t: 2 x 64-bit LE\\n        // - f: 8-bit\\n        bytes state;\\n        // Expected output hash length. (Used in `finalize`.)\\n        uint out_len;\\n        // Data passed to \\\"function F\\\".\\n        // NOTE: this is limited to 24 bits.\\n        uint input_counter;\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function init(\\n        bytes memory key,\\n        uint out_len\\n    ) internal view returns (Instance memory instance) {\\n        require(key.length == 0, \\\"Invalid key\\\");\\n        require(out_len == 32, \\\"Invalid out_len\\\");\\n        reset(instance, key, out_len);\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function reset(\\n        Instance memory instance,\\n        bytes memory key,\\n        uint out_len\\n    ) internal view {\\n        instance.out_len = out_len;\\n        instance.input_counter = 0;\\n\\n        // This is entire state transmitted to the precompile.\\n        // It is byteswapped for the encoding requirements, additionally\\n        // the IV has the initial parameter block 0 XOR constant applied, but\\n        // not the key and output length.\\n        instance\\n            .state = hex\\\"0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\";\\n        bytes memory state = instance.state;\\n\\n        // Update parameter block 0 with key length and output length.\\n        uint key_len = key.length;\\n        assembly {\\n            let ptr := add(state, 36)\\n            let tmp := mload(ptr)\\n            let p0 := or(shl(240, key_len), shl(248, out_len))\\n            tmp := xor(tmp, p0)\\n            mstore(ptr, tmp)\\n        }\\n\\n        // TODO: support salt and personalization\\n\\n        if (key_len > 0) {\\n            require(key_len == 64);\\n            // FIXME: the key must be zero padded\\n            assert(key.length == 128);\\n            update(instance, key, key_len);\\n        }\\n    }\\n\\n    // This calls the blake2 precompile (\\\"function F of the spec\\\").\\n    // It expects the state was updated with the next block. Upon returning the state will be updated,\\n    // but the supplied block data will not be cleared.\\n    function call_function_f(Instance memory instance) private view {\\n        bytes memory state = instance.state;\\n        assembly {\\n            let state_ptr := add(state, 32)\\n            if iszero(\\n                staticcall(\\n                    not(0),\\n                    0x09,\\n                    state_ptr,\\n                    0xd5,\\n                    add(state_ptr, 4),\\n                    0x40\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    // This function will split blocks correctly and repeatedly call the precompile.\\n    // NOTE: this is dumb right now and expects `data` to be 128 bytes long and padded with zeroes,\\n    //       hence the real length is indicated with `data_len`\\n    function update_loop(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len,\\n        bool last_block\\n    ) private view {\\n        bytes memory state = instance.state;\\n        uint input_counter = instance.input_counter;\\n\\n        // This is the memory location where the \\\"data block\\\" starts for the precompile.\\n        uint state_ptr;\\n        assembly {\\n            // The `rounds` field is 4 bytes long and the `h` field is 64-bytes long.\\n            // Also adjust for the size of the bytes type.\\n            state_ptr := add(state, 100)\\n        }\\n\\n        // This is the memory location where the input data resides.\\n        uint data_ptr;\\n        assembly {\\n            data_ptr := add(data, 32)\\n        }\\n\\n        uint len = data.length;\\n        while (len > 0) {\\n            if (len >= 128) {\\n                assembly {\\n                    mstore(state_ptr, mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 32), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 64), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 96), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n                }\\n\\n                len -= 128;\\n                // FIXME: remove this once implemented proper padding\\n                if (data_len < 128) {\\n                    input_counter += data_len;\\n                } else {\\n                    data_len -= 128;\\n                    input_counter += 128;\\n                }\\n            } else {\\n                // FIXME: implement support for smaller than 128 byte blocks\\n                revert();\\n            }\\n\\n            // Set length field (little-endian) for maximum of 24-bits.\\n            assembly {\\n                mstore8(add(state, 228), and(input_counter, 0xff))\\n                mstore8(add(state, 229), and(shr(8, input_counter), 0xff))\\n                mstore8(add(state, 230), and(shr(16, input_counter), 0xff))\\n            }\\n\\n            // Set the last block indicator.\\n            // Only if we've processed all input.\\n            if (len == 0) {\\n                assembly {\\n                    // Writing byte 212 here.\\n                    mstore8(add(state, 244), last_block)\\n                }\\n            }\\n\\n            // Call the precompile\\n            call_function_f(instance);\\n        }\\n\\n        instance.input_counter = input_counter;\\n    }\\n\\n    // Update the state with a non-final block.\\n    // NOTE: the input must be complete blocks.\\n    function update(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len\\n    ) internal view {\\n        require((data.length % 128) == 0);\\n        update_loop(instance, data, data_len, false);\\n    }\\n\\n    // Update the state with a final block and return the hash.\\n    function finalize(\\n        Instance memory instance,\\n        bytes memory data\\n    ) internal view returns (bytes memory output) {\\n        // FIXME: support incomplete blocks (zero pad them)\\n        uint input_length = data.length;\\n        if (input_length == 0 || (input_length % 128) != 0) {\\n            data = abi.encodePacked(\\n                data,\\n                new bytes(128 - (input_length % 128))\\n            );\\n        }\\n        assert((data.length % 128) == 0);\\n        update_loop(instance, data, input_length, true);\\n\\n        // FIXME: support other lengths\\n        // assert(instance.out_len == 64);\\n\\n        bytes memory state = instance.state;\\n        output = new bytes(instance.out_len);\\n        if (instance.out_len == 16) {\\n            assembly {\\n                mstore(add(output, 16), mload(add(state, 20)))\\n                mstore(output, 16)\\n            }\\n        } else if (instance.out_len == 32) {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n            }\\n        } else {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n                mstore(add(output, 64), mload(add(state, 68)))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f7b7312aa9aa8c89ab5f67098b6e1014829e1acd62976f002b2d09ada2ff2fe\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6107fd61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806332640a521461004557806336e7c7621461006a575b600080fd5b610058610053366004610514565b61007d565b60405190815260200160405180910390f35b610058610078366004610553565b610113565b6000806040518060400160405280600481526020016332bb369d60e11b81525090506000836040516020016100ca919060609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040529050600082826040516020016100f092919061063f565b604051602081830303815290604052905061010a81610113565b95945050505050565b600080610130604051806020016040528060008152506020610156565b905061013c818461020f565b80602001905181019061014f919061065c565b9392505050565b61017a60405180606001604052806060815260200160008152602001600081525090565b8251156101bc5760405162461bcd60e51b815260206004820152600b60248201526a496e76616c6964206b657960a81b60448201526064015b60405180910390fd5b816020146101fe5760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21037baba2fb632b760891b60448201526064016101b3565b610209818484610379565b92915050565b805160609080158061022a5750610227608082610675565b15155b156102ac578261023b608083610675565b6102469060806106ad565b67ffffffffffffffff81111561025e5761025e61053d565b6040519080825280601f01601f191660200182016040528015610288576020820181803683370190505b5060405160200161029a92919061063f565b60405160208183030381529060405292505b608083516102ba9190610675565b156102c7576102c76106c4565b6102d484848360016103f7565b8351602085015167ffffffffffffffff8111156102f3576102f361053d565b6040519080825280601f01601f19166020018201604052801561031d576020820181803683370190505b509250846020015160101415610340576014810151601084015260108352610371565b84602001516020141561035c5760248101516020840152610371565b60248101516020840152604481015160408401525b505092915050565b80836020018181525050600083604001818152505060405180610100016040528060d581526020016106f360d59139808452825160248201805160f083901b60f886901b1718905280156103f057806040146103d457600080fd5b83516080146103e5576103e56106c4565b6103f08585836104cc565b5050505050565b835160408501518451606483019060208701905b80156104ba5760808110610040578151835260208083015190840152604080830151908401526060808301519084015260809182019161044b90826106ad565b905060808710156104675761046087856106da565b935061047f565b6104726080886106ad565b96506104606080856106da565b60ff841660e486015360ff8460081c1660e586015360ff8460101c1660e6860153806104ac578560f48601535b6104b5896104f6565b61040b565b50505060409095019490945250505050565b608082516104da9190610675565b156104e457600080fd5b6104f183838360006103f7565b505050565b80516020810160406024830160d5836009600019fa6104f157600080fd5b60006020828403121561052657600080fd5b81356001600160a01b038116811461014f57600080fd5b634e487b7160e01b600052604160045260246000fd5b60006020828403121561056557600080fd5b813567ffffffffffffffff8082111561057d57600080fd5b818401915084601f83011261059157600080fd5b8135818111156105a3576105a361053d565b604051601f8201601f19908116603f011681019083821181831017156105cb576105cb61053d565b816040528281528760208487010111156105e457600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000815160005b81811015610625576020818501810151868301520161060b565b81811115610634576000828601525b509290920192915050565b600061065461064e8386610604565b84610604565b949350505050565b60006020828403121561066e57600080fd5b5051919050565b60008261069257634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b6000828210156106bf576106bf610697565b500390565b634e487b7160e01b600052600160045260246000fd5b600082198211156106ed576106ed610697565b50019056fe0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a2646970667358221220e1dd896531984e02e3507be0ac3ea03304a937a9e360fc140a6e15a978f6853c64736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806332640a521461004557806336e7c7621461006a575b600080fd5b610058610053366004610514565b61007d565b60405190815260200160405180910390f35b610058610078366004610553565b610113565b6000806040518060400160405280600481526020016332bb369d60e11b81525090506000836040516020016100ca919060609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040529050600082826040516020016100f092919061063f565b604051602081830303815290604052905061010a81610113565b95945050505050565b600080610130604051806020016040528060008152506020610156565b905061013c818461020f565b80602001905181019061014f919061065c565b9392505050565b61017a60405180606001604052806060815260200160008152602001600081525090565b8251156101bc5760405162461bcd60e51b815260206004820152600b60248201526a496e76616c6964206b657960a81b60448201526064015b60405180910390fd5b816020146101fe5760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21037baba2fb632b760891b60448201526064016101b3565b610209818484610379565b92915050565b805160609080158061022a5750610227608082610675565b15155b156102ac578261023b608083610675565b6102469060806106ad565b67ffffffffffffffff81111561025e5761025e61053d565b6040519080825280601f01601f191660200182016040528015610288576020820181803683370190505b5060405160200161029a92919061063f565b60405160208183030381529060405292505b608083516102ba9190610675565b156102c7576102c76106c4565b6102d484848360016103f7565b8351602085015167ffffffffffffffff8111156102f3576102f361053d565b6040519080825280601f01601f19166020018201604052801561031d576020820181803683370190505b509250846020015160101415610340576014810151601084015260108352610371565b84602001516020141561035c5760248101516020840152610371565b60248101516020840152604481015160408401525b505092915050565b80836020018181525050600083604001818152505060405180610100016040528060d581526020016106f360d59139808452825160248201805160f083901b60f886901b1718905280156103f057806040146103d457600080fd5b83516080146103e5576103e56106c4565b6103f08585836104cc565b5050505050565b835160408501518451606483019060208701905b80156104ba5760808110610040578151835260208083015190840152604080830151908401526060808301519084015260809182019161044b90826106ad565b905060808710156104675761046087856106da565b935061047f565b6104726080886106ad565b96506104606080856106da565b60ff841660e486015360ff8460081c1660e586015360ff8460101c1660e6860153806104ac578560f48601535b6104b5896104f6565b61040b565b50505060409095019490945250505050565b608082516104da9190610675565b156104e457600080fd5b6104f183838360006103f7565b505050565b80516020810160406024830160d5836009600019fa6104f157600080fd5b60006020828403121561052657600080fd5b81356001600160a01b038116811461014f57600080fd5b634e487b7160e01b600052604160045260246000fd5b60006020828403121561056557600080fd5b813567ffffffffffffffff8082111561057d57600080fd5b818401915084601f83011261059157600080fd5b8135818111156105a3576105a361053d565b604051601f8201601f19908116603f011681019083821181831017156105cb576105cb61053d565b816040528281528760208487010111156105e457600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000815160005b81811015610625576020818501810151868301520161060b565b81811115610634576000828601525b509290920192915050565b600061065461064e8386610604565b84610604565b949350505050565b60006020828403121561066e57600080fd5b5051919050565b60008261069257634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b6000828210156106bf576106bf610697565b500390565b634e487b7160e01b600052600160045260246000fd5b600082198211156106ed576106ed610697565b50019056fe0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a2646970667358221220e1dd896531984e02e3507be0ac3ea03304a937a9e360fc140a6e15a978f6853c64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}