{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ISlpx.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface ISlpx {\n    event Mint(\n        address minter,\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        bytes callcode\n    );\n    event Redeem(\n        address redeemer,\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        bytes callcode\n    );\n    event Swap(\n        address swapper,\n        address assetInAddress,\n        address assetOutAddress,\n        uint256 assetInAmount,\n        uint128 assetOutMin,\n        address receiver,\n        bytes callcode\n    );\n\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\n    function mintVNativeAsset(address receiver) external payable;\n\n    /// Minted vAssets\n    function mintVAsset(address assetAddress, uint256 amount, address receiver) external;\n\n    /// Redeem assets\n    function redeemAsset(address vAssetAddress, uint256 amount, address receiver) external;\n\n    /// Swap one asset for another\n    function swapAssetsForExactAssets(\n        address assetInAddress,\n        address assetOutAddress,\n        uint256 assetInAmount,\n        uint128 assetOutMin,\n        address receiver\n    ) external;\n\n    /// Swap one asset for native asset\n    function swapAssetsForExactNativeAssets(\n        address assetInAddress,\n        uint256 assetInAmount,\n        uint128 assetOutMin,\n        address receiver\n    ) external;\n\n    /// Swap native asset for another\n    function swapNativeAssetsForExactAssets(\n        address assetOutAddress,\n        uint128 assetOutMin,\n        address receiver\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/XcmTransactorV2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @dev The XcmTransactorV2 contract's address.\naddress constant XCM_TRANSACTOR_V2_ADDRESS = 0x000000000000000000000000000000000000080D;\n\n/// @dev The XcmTransactorV2 contract's instance.\nXcmTransactorV2 constant XCM_TRANSACTOR_V2_CONTRACT = XcmTransactorV2(\n    XCM_TRANSACTOR_V2_ADDRESS\n);\n\n/// @author The Moonbeam Team\n/// @title Xcm Transactor Interface\n/// The interface through which solidity contracts will interact with xcm transactor pallet\n/// @custom:address 0x000000000000000000000000000000000000080D\ninterface XcmTransactorV2 {\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\n    struct Multilocation {\n        uint8 parents;\n        bytes[] interior;\n    }\n\n    /// Get index of an account in xcm transactor\n    /// @custom:selector 3fdc4f36\n    /// @param index The index of which we want to retrieve the account\n    /// @return owner The owner of the derivative index\n    ///\n    function indexToAccount(uint16 index) external view returns (address owner);\n\n    /// Get transact info of a multilocation\n    /// @custom:selector b689e20c\n    /// @param multilocation The location for which we want to know the transact info\n    /// @return transactExtraWeight The extra weight involved in the XCM message of using derivative\n    /// @return transactExtraWeightSigned The extra weight involved in the XCM message of using signed\n    /// @return maxWeight Maximum allowed weight for a single message in dest\n    ///\n    function transactInfoWithSigned(\n        Multilocation memory multilocation\n    )\n        external\n        view\n        returns (\n            uint64 transactExtraWeight,\n            uint64 transactExtraWeightSigned,\n            uint64 maxWeight\n        );\n\n    /// Get fee per second charged in its reserve chain for an asset\n    /// @custom:selector 906c9990\n    /// @param multilocation The asset location for which we want to know the fee per second value\n    /// @return feePerSecond The fee per second that the reserve chain charges for this asset\n    ///\n    function feePerSecond(\n        Multilocation memory multilocation\n    ) external view returns (uint256 feePerSecond);\n\n    /// Transact through XCM using fee based on its multilocation\n    /// @custom:selector fe430475\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param transactor The transactor to be used\n    /// @param index The index to be used\n    /// @param feeAsset The asset in which we want to pay fees.\n    /// It has to be a reserve of the destination chain\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain\n    /// @param innerCall The inner call to be executed in the destination chain\n    /// @param feeAmount Amount to be used as fee.\n    /// @param overallWeight Overall weight to be used for the xcm message.\n    ///\n    function transactThroughDerivativeMultilocation(\n        uint8 transactor,\n        uint16 index,\n        Multilocation memory feeAsset,\n        uint64 transactRequiredWeightAtMost,\n        bytes memory innerCall,\n        uint256 feeAmount,\n        uint64 overallWeight\n    ) external;\n\n    /// Transact through XCM using fee based on its currency_id\n    /// @custom:selector 185de2ae\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param transactor The transactor to be used\n    /// @param index The index to be used\n    /// @param currencyId Address of the currencyId of the asset to be used for fees\n    /// It has to be a reserve of the destination chain\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain\n    /// @param innerCall The inner call to be executed in the destination chain\n    /// @param feeAmount Amount to be used as fee.\n    /// @param overallWeight Overall weight to be used for the xcm message.\n    function transactThroughDerivative(\n        uint8 transactor,\n        uint16 index,\n        address currencyId,\n        uint64 transactRequiredWeightAtMost,\n        bytes memory innerCall,\n        uint256 feeAmount,\n        uint64 overallWeight\n    ) external;\n\n    /// Transact through XCM using fee based on its multilocation through signed origins\n    /// @custom:selector d7ab340c\n    /// @dev No token is burnt before sending the message. The caller must ensure the destination\n    /// is able to undertand the DescendOrigin message, and create a unique account from which\n    /// dispatch the call\n    /// @param dest The destination chain (as multilocation) where to send the message\n    /// @param feeLocation The asset multilocation that indentifies the fee payment currency\n    /// It has to be a reserve of the destination chain\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain for the call to be made\n    /// @param call The call to be executed in the destination chain\n    /// @param feeAmount Amount to be used as fee.\n    /// @param overallWeight Overall weight to be used for the xcm message.\n    function transactThroughSignedMultilocation(\n        Multilocation memory dest,\n        Multilocation memory feeLocation,\n        uint64 transactRequiredWeightAtMost,\n        bytes memory call,\n        uint256 feeAmount,\n        uint64 overallWeight\n    ) external;\n\n    /// Transact through XCM using fee based on its erc20 address through signed origins\n    /// @custom:selector b648f3fe\n    /// @dev No token is burnt before sending the message. The caller must ensure the destination\n    /// is able to undertand the DescendOrigin message, and create a unique account from which\n    /// dispatch the call\n    /// @param dest The destination chain (as multilocation) where to send the message\n    /// @param feeLocationAddress The ERC20 address of the token we want to use to pay for fees\n    /// only callable if such an asset has been BRIDGED to our chain\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain for the call to be made\n    /// @param call The call to be executed in the destination chain\n    /// @param feeAmount Amount to be used as fee.\n    /// @param overallWeight Overall weight to be used for the xcm message.\n    function transactThroughSigned(\n        Multilocation memory dest,\n        address feeLocationAddress,\n        uint64 transactRequiredWeightAtMost,\n        bytes memory call,\n        uint256 feeAmount,\n        uint64 overallWeight\n    ) external;\n}\n"
    },
    "contracts/interfaces/Xtokens.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @dev The Xtokens contract's address.\naddress constant XTOKENS_ADDRESS = 0x0000000000000000000000000000000000000804;\n\n/// @dev The Xtokens contract's instance.\nXtokens constant XTOKENS_CONTRACT = Xtokens(XTOKENS_ADDRESS);\n\n/// @author The Moonbeam Team\n/// @title Xtokens Interface\n/// @dev The interface through which solidity contracts will interact with xtokens pallet\n/// @custom:address 0x0000000000000000000000000000000000000804\ninterface Xtokens {\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\n    struct Multilocation {\n        uint8 parents;\n        bytes[] interior;\n    }\n\n    // A MultiAsset is defined by a multilocation and an amount\n    struct MultiAsset {\n        Multilocation location;\n        uint256 amount;\n    }\n\n    // A Currency is defined by address and the amount to be transferred\n    struct Currency {\n        address currencyAddress;\n        uint256 amount;\n    }\n\n    /// Transfer a token through XCM based on its currencyId\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector b9f813ff\n    function transfer(\n        address currencyAddress,\n        uint256 amount,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer a token through XCM based on its currencyId specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector 3e506ef0\n    function transferWithFee(\n        address currencyAddress,\n        uint256 amount,\n        uint256 fee,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer a token through XCM based on its MultiLocation\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param asset The asset we want to transfer, defined by its multilocation.\n    /// Currently only Concrete Fungible assets\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector b4f76f96\n    function transferMultiasset(\n        Multilocation memory asset,\n        uint256 amount,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer a token through XCM based on its MultiLocation specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param asset The asset we want to transfer, defined by its multilocation.\n    /// Currently only Concrete Fungible assets\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector 150c016a\n    function transferMultiassetWithFee(\n        Multilocation memory asset,\n        uint256 amount,\n        uint256 fee,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer several tokens at once through XCM based on its address specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencies The currencies we want to transfer, defined by their address and amount.\n    /// @param feeItem Which of the currencies to be used as fee\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain\n    /// @custom:selector ab946323\n    function transferMultiCurrencies(\n        Currency[] memory currencies,\n        uint32 feeItem,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer several tokens at once through XCM based on its location specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param assets The assets we want to transfer, defined by their location and amount.\n    /// @param feeItem Which of the currencies to be used as fee\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain\n    /// @custom:selector 797b45fd\n    function transferMultiAssets(\n        MultiAsset[] memory assets,\n        uint32 feeItem,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n}\n"
    },
    "contracts/MoonbeamSlpx.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./interfaces/XcmTransactorV2.sol\";\nimport \"./interfaces/Xtokens.sol\";\nimport \"./interfaces/ISlpx.sol\";\nimport \"./utils/AddressToAccount.sol\";\nimport \"./utils/BuildCallData.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\ncontract MoonbeamSlpx is\n    ISlpx,\n    OwnableUpgradeable,\n    PausableUpgradeable\n{\n    address public constant NATIVE_ASSET_ADDRESS =\n        0x0000000000000000000000000000000000000802;\n    address public constant XCM_TRANSACTORV2_ADDRESS =\n        0x000000000000000000000000000000000000080D;\n    address public constant XTOKENS =\n        0x0000000000000000000000000000000000000804;\n    bytes1 public constant MOONBEAM_CHAIN = 0x01;\n\n    uint64 public xtokenWeight;\n    uint64 public transactRequiredWeightAtMost;\n    uint64 public overallWeight;\n    uint256 public feeAmount;\n\n    address public BNCAddress;\n    uint32 public bifrostParaId;\n    bytes2 public nativeCurrencyId;\n\n    XcmTransactorV2.Multilocation public xcmTransactorDestination;\n\n    mapping(address => bytes2) public assetAddressToCurrencyId;\n    mapping(address => uint256) public assetAddressToMinimumValue;\n\n    function initialize(\n        address _BNCAddress,\n        uint32 _bifrostParaId,\n        bytes2 _nativeCurrencyId\n    ) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n        require(_BNCAddress != address(0), \"Invalid address\");\n        require(\n            _bifrostParaId == 2001 || _bifrostParaId == 2030,\n            \"Invalid bifrostParaId\"\n        );\n        require(\n            _nativeCurrencyId == 0x020a || _nativeCurrencyId == 0x0801,\n            \"Invalid nativeCurrencyId\"\n        );\n        setFee(10000000000, 10000000000, 10000000000, 1000000000000);\n        BNCAddress = _BNCAddress;\n        bifrostParaId = _bifrostParaId;\n        nativeCurrencyId = _nativeCurrencyId;\n\n        // Init xcmTransactorDestination\n        bytes[] memory interior = new bytes[](1);\n        // Parachain: 2001/2030\n        interior[0] = bytes.concat(hex\"00\", bytes4(_bifrostParaId));\n        xcmTransactorDestination = XcmTransactorV2.Multilocation({\n            parents: 1,\n            interior: interior\n        });\n    }\n\n    function setFee(\n        uint64 _xtokenWeight,\n        uint64 _transactRequiredWeightAtMost,\n        uint64 _overallWeight,\n        uint256 _feeAmount\n    ) public onlyOwner {\n        require(_xtokenWeight <= 10000000000, \"xtokenWeight too large\");\n        require(\n            _transactRequiredWeightAtMost <= 10000000000,\n            \"transactRequiredWeightAtMost too large\"\n        );\n        require(_overallWeight <= 10000000000, \"OverallWeight too large\");\n        require(_feeAmount <= 1000000000000, \"feeAmount too large\");\n        xtokenWeight = _xtokenWeight;\n        transactRequiredWeightAtMost = _transactRequiredWeightAtMost;\n        overallWeight = _overallWeight;\n        feeAmount = _feeAmount;\n    }\n\n    function setAssetAddressInfo(\n        address assetAddress,\n        uint256 minimumValue,\n        bytes2 currencyId\n    ) public onlyOwner {\n        require(assetAddress != address(0), \"Invalid assetAddress\");\n        require(minimumValue != 0, \"Invalid minimumValue\");\n        require(currencyId != bytes2(0), \"Invalid currencyId\");\n        assetAddressToMinimumValue[assetAddress] = minimumValue;\n        assetAddressToCurrencyId[assetAddress] = currencyId;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function xcmTransferAsset(address assetAddress, uint256 amount) internal {\n        require(assetAddress != address(0), \"Invalid assetAddress\");\n        require(\n            assetAddressToMinimumValue[assetAddress] != 0,\n            \"Not set MinimumValue\"\n        );\n        require(\n            amount >= assetAddressToMinimumValue[assetAddress],\n            \"Less than MinimumValue\"\n        );\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\n            _msgSender()\n        );\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\n            publicKey\n        );\n        IERC20 asset = IERC20(assetAddress);\n        asset.transferFrom(_msgSender(), address(this), amount);\n        Xtokens(XTOKENS).transfer(\n            assetAddress,\n            amount,\n            dest_account,\n            xtokenWeight\n        );\n    }\n\n    function xcmTransferNativeAsset(uint256 amount) public  {\n        require(\n            assetAddressToMinimumValue[NATIVE_ASSET_ADDRESS] != 0,\n            \"Not set MinimumValue\"\n        );\n        require(\n            amount >= assetAddressToMinimumValue[NATIVE_ASSET_ADDRESS],\n            \"Less than MinimumValue\"\n        );\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\n            _msgSender()\n        );\n\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\n            publicKey\n        );\n        Xtokens(XTOKENS).transfer(\n            NATIVE_ASSET_ADDRESS,\n            amount,\n            dest_account,\n            xtokenWeight\n        );\n    }\n\n    function tranact(bytes memory callData) public  {\n         XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            transactRequiredWeightAtMost,\n            callData,\n            feeAmount,\n            overallWeight\n        );\n    }\n\n    function mintVNativeAsset(address receiver) external payable override whenNotPaused {\n        // xtokens call\n        xcmTransferNativeAsset(msg.value);\n\n        // Build bifrost xcm-action mint call data\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildMintCallBytes(\n            _msgSender(),\n            nativeCurrencyId,\n            targetChain\n        );\n        // XCM Transact\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            transactRequiredWeightAtMost,\n            callData,\n            feeAmount,\n            overallWeight\n        );\n        emit Mint(_msgSender(), NATIVE_ASSET_ADDRESS, msg.value, receiver,callData);\n    }\n\n    function mintVAsset(\n        address assetAddress,\n        uint256 amount,\n        address receiver\n    ) external override whenNotPaused {\n        bytes2 token = assetAddressToCurrencyId[assetAddress];\n        require(token != bytes2(0), \"Invalid assetAddress\");\n\n        // xtokens call\n        xcmTransferAsset(assetAddress, amount);\n\n        // Build bifrost xcm-action mint call data\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildMintCallBytes(\n            _msgSender(),\n            token,\n            targetChain\n        );\n        // XCM Transact\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            transactRequiredWeightAtMost,\n            callData,\n            feeAmount,\n            overallWeight\n        );\n        emit Mint(_msgSender(), assetAddress, amount, receiver,callData);\n    }\n\n    function redeemAsset(\n        address vAssetAddress,\n        uint256 amount,\n        address receiver\n    ) external override whenNotPaused {\n        bytes2 vtoken = assetAddressToCurrencyId[vAssetAddress];\n        require(vtoken != bytes2(0), \"Invalid vAssetAddress\");\n\n        // xtokens call\n        xcmTransferAsset(vAssetAddress, amount);\n\n        // xcm transactor call\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildRedeemCallBytes(\n            _msgSender(),\n            vtoken,\n            targetChain\n        );\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            transactRequiredWeightAtMost,\n            callData,\n            feeAmount,\n            overallWeight\n        );\n        emit Redeem(_msgSender(), vAssetAddress, amount, receiver,callData);\n    }\n\n    function swapAssetsForExactAssets(\n        address assetInAddress,\n        address assetOutAddress,\n        uint256 assetInAmount,\n        uint128 assetOutMin,\n        address receiver\n    ) external override whenNotPaused {\n        bytes2 assetIn = assetAddressToCurrencyId[assetInAddress];\n        bytes2 assetOut = assetAddressToCurrencyId[assetOutAddress];\n        require(assetIn != bytes2(0) && assetOut != bytes2(0), \"Invalid asset\");\n\n        xcmTransferAsset(assetInAddress, assetInAmount);\n\n        // xcm transactor call\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\n            _msgSender(),\n            assetIn,\n            assetOut,\n            assetOutMin,\n            targetChain\n        );\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            transactRequiredWeightAtMost,\n            callData,\n            feeAmount,\n            overallWeight\n        );\n        emit Swap(\n            _msgSender(),\n            assetInAddress,\n            assetOutAddress,\n            assetInAmount,\n            assetOutMin,\n            receiver,\n            callData\n        );\n    }\n\n    function swapAssetsForExactNativeAssets(\n        address assetInAddress,\n        uint256 assetInAmount,\n        uint128 assetOutMin,\n        address receiver\n    ) external override whenNotPaused {\n        bytes2 assetIn = assetAddressToCurrencyId[assetInAddress];\n        require(assetIn != bytes2(0), \"Invalid assetIn\");\n\n        xcmTransferAsset(assetInAddress, assetInAmount);\n\n        // xcm transactor call\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\n            _msgSender(),\n            assetIn,\n            nativeCurrencyId,\n            assetOutMin,\n            targetChain\n        );\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            transactRequiredWeightAtMost,\n            callData,\n            feeAmount,\n            overallWeight\n        );\n        emit Swap(\n            _msgSender(),\n            assetInAddress,\n            NATIVE_ASSET_ADDRESS,\n            assetInAmount,\n            assetOutMin,\n            receiver,\n            callData\n        );\n    }\n\n    function swapNativeAssetsForExactAssets(\n        address assetOutAddress,\n        uint128 assetOutMin,\n        address receiver\n    ) external payable override whenNotPaused {\n        bytes2 assetOut = assetAddressToCurrencyId[assetOutAddress];\n        require(assetOut != bytes2(0), \"Invalid assetOut\");\n\n        xcmTransferNativeAsset(msg.value);\n\n        // xcm transactor call\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\n            _msgSender(),\n            nativeCurrencyId,\n            assetOut,\n            assetOutMin,\n            targetChain\n        );\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            transactRequiredWeightAtMost,\n            callData,\n            feeAmount,\n            overallWeight\n        );\n        emit Swap(\n            _msgSender(),\n            NATIVE_ASSET_ADDRESS,\n            assetOutAddress,\n            msg.value,\n            assetOutMin,\n            receiver,\n            callData\n        );\n    }\n\n    function getXtokensDestination(\n        bytes32 publicKey\n    ) internal view returns (Xtokens.Multilocation memory) {\n        bytes[] memory interior = new bytes[](2);\n        // Parachain: 2001/2030\n        interior[0] = bytes.concat(hex\"00\", bytes4(bifrostParaId));\n        // AccountId32: { id: public_key , network: any }\n        interior[1] = bytes.concat(hex\"01\", publicKey, hex\"00\");\n        Xtokens.Multilocation memory dest = Xtokens.Multilocation({\n            parents: 1,\n            interior: interior\n        });\n\n        return dest;\n    }\n}\n"
    },
    "contracts/utils/AddressToAccount.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./Blake2b.sol\";\n\nlibrary AddressToAccount {\n    using Blake2b for Blake2b.Instance;\n\n    function blake2bHash(bytes memory src) public view returns (bytes32 des) {\n        Blake2b.Instance memory instance = Blake2b.init(hex\"\", 32);\n        return abi.decode(instance.finalize(src), (bytes32));\n    }\n\n    function AddressToSubstrateAccount(\n        address addr\n    ) public view returns (bytes32 account) {\n        bytes memory prefix = bytes(\"evm:\");\n        bytes memory addrBytes = abi.encodePacked(addr);\n        bytes memory data = abi.encodePacked(prefix, addrBytes);\n        return blake2bHash(data);\n    }\n}\n"
    },
    "contracts/utils/Blake2b.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nlibrary Blake2b {\n    struct Instance {\n        // This is a bit misleadingly called state as it not only includes the Blake2 state,\n        // but every field needed for the \"blake2 f function precompile\".\n        //\n        // This is a tightly packed buffer of:\n        // - rounds: 32-bit BE\n        // - h: 8 x 64-bit LE\n        // - m: 16 x 64-bit LE\n        // - t: 2 x 64-bit LE\n        // - f: 8-bit\n        bytes state;\n        // Expected output hash length. (Used in `finalize`.)\n        uint out_len;\n        // Data passed to \"function F\".\n        // NOTE: this is limited to 24 bits.\n        uint input_counter;\n    }\n\n    // Initialise the state with a given `key` and required `out_len` hash length.\n    function init(\n        bytes memory key,\n        uint out_len\n    ) internal view returns (Instance memory instance) {\n        require(key.length == 0, \"Invalid key\");\n        require(out_len == 32, \"Invalid out_len\");\n        reset(instance, key, out_len);\n    }\n\n    // Initialise the state with a given `key` and required `out_len` hash length.\n    function reset(\n        Instance memory instance,\n        bytes memory key,\n        uint out_len\n    ) internal view {\n        instance.out_len = out_len;\n        instance.input_counter = 0;\n\n        // This is entire state transmitted to the precompile.\n        // It is byteswapped for the encoding requirements, additionally\n        // the IV has the initial parameter block 0 XOR constant applied, but\n        // not the key and output length.\n        instance\n            .state = hex\"0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n        bytes memory state = instance.state;\n\n        // Update parameter block 0 with key length and output length.\n        uint key_len = key.length;\n        assembly {\n            let ptr := add(state, 36)\n            let tmp := mload(ptr)\n            let p0 := or(shl(240, key_len), shl(248, out_len))\n            tmp := xor(tmp, p0)\n            mstore(ptr, tmp)\n        }\n\n        // TODO: support salt and personalization\n\n        if (key_len > 0) {\n            require(key_len == 64);\n            // FIXME: the key must be zero padded\n            assert(key.length == 128);\n            update(instance, key, key_len);\n        }\n    }\n\n    // This calls the blake2 precompile (\"function F of the spec\").\n    // It expects the state was updated with the next block. Upon returning the state will be updated,\n    // but the supplied block data will not be cleared.\n    function call_function_f(Instance memory instance) private view {\n        bytes memory state = instance.state;\n        assembly {\n            let state_ptr := add(state, 32)\n            if iszero(\n                staticcall(\n                    not(0),\n                    0x09,\n                    state_ptr,\n                    0xd5,\n                    add(state_ptr, 4),\n                    0x40\n                )\n            ) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    // This function will split blocks correctly and repeatedly call the precompile.\n    // NOTE: this is dumb right now and expects `data` to be 128 bytes long and padded with zeroes,\n    //       hence the real length is indicated with `data_len`\n    function update_loop(\n        Instance memory instance,\n        bytes memory data,\n        uint data_len,\n        bool last_block\n    ) private view {\n        bytes memory state = instance.state;\n        uint input_counter = instance.input_counter;\n\n        // This is the memory location where the \"data block\" starts for the precompile.\n        uint state_ptr;\n        assembly {\n            // The `rounds` field is 4 bytes long and the `h` field is 64-bytes long.\n            // Also adjust for the size of the bytes type.\n            state_ptr := add(state, 100)\n        }\n\n        // This is the memory location where the input data resides.\n        uint data_ptr;\n        assembly {\n            data_ptr := add(data, 32)\n        }\n\n        uint len = data.length;\n        while (len > 0) {\n            if (len >= 128) {\n                assembly {\n                    mstore(state_ptr, mload(data_ptr))\n                    data_ptr := add(data_ptr, 32)\n\n                    mstore(add(state_ptr, 32), mload(data_ptr))\n                    data_ptr := add(data_ptr, 32)\n\n                    mstore(add(state_ptr, 64), mload(data_ptr))\n                    data_ptr := add(data_ptr, 32)\n\n                    mstore(add(state_ptr, 96), mload(data_ptr))\n                    data_ptr := add(data_ptr, 32)\n                }\n\n                len -= 128;\n                // FIXME: remove this once implemented proper padding\n                if (data_len < 128) {\n                    input_counter += data_len;\n                } else {\n                    data_len -= 128;\n                    input_counter += 128;\n                }\n            } else {\n                // FIXME: implement support for smaller than 128 byte blocks\n                revert();\n            }\n\n            // Set length field (little-endian) for maximum of 24-bits.\n            assembly {\n                mstore8(add(state, 228), and(input_counter, 0xff))\n                mstore8(add(state, 229), and(shr(8, input_counter), 0xff))\n                mstore8(add(state, 230), and(shr(16, input_counter), 0xff))\n            }\n\n            // Set the last block indicator.\n            // Only if we've processed all input.\n            if (len == 0) {\n                assembly {\n                    // Writing byte 212 here.\n                    mstore8(add(state, 244), last_block)\n                }\n            }\n\n            // Call the precompile\n            call_function_f(instance);\n        }\n\n        instance.input_counter = input_counter;\n    }\n\n    // Update the state with a non-final block.\n    // NOTE: the input must be complete blocks.\n    function update(\n        Instance memory instance,\n        bytes memory data,\n        uint data_len\n    ) internal view {\n        require((data.length % 128) == 0);\n        update_loop(instance, data, data_len, false);\n    }\n\n    // Update the state with a final block and return the hash.\n    function finalize(\n        Instance memory instance,\n        bytes memory data\n    ) internal view returns (bytes memory output) {\n        // FIXME: support incomplete blocks (zero pad them)\n        uint input_length = data.length;\n        if (input_length == 0 || (input_length % 128) != 0) {\n            data = abi.encodePacked(\n                data,\n                new bytes(128 - (input_length % 128))\n            );\n        }\n        assert((data.length % 128) == 0);\n        update_loop(instance, data, input_length, true);\n\n        // FIXME: support other lengths\n        // assert(instance.out_len == 64);\n\n        bytes memory state = instance.state;\n        output = new bytes(instance.out_len);\n        if (instance.out_len == 16) {\n            assembly {\n                mstore(add(output, 16), mload(add(state, 20)))\n                mstore(output, 16)\n            }\n        } else if (instance.out_len == 32) {\n            assembly {\n                mstore(add(output, 32), mload(add(state, 36)))\n            }\n        } else {\n            assembly {\n                mstore(add(output, 32), mload(add(state, 36)))\n                mstore(add(output, 64), mload(add(state, 68)))\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/BuildCallData.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nlibrary BuildCallData {\n    uint8 public constant PALLET_INDEX = 125;\n    uint8 public constant MINT_CALL_INDEX = 0;\n    uint8 public constant SWAP_CALL_INDEX = 1;\n    uint8 public constant REDEEM_CALL_INDEX = 2;\n\n    function buildMintCallBytes(\n        address caller,\n        bytes2 token,\n        bytes memory targetChain\n    ) public pure returns (bytes memory) {\n        bytes memory prefix = new bytes(2);\n        // storage pallet index\n        prefix[0] = bytes1(PALLET_INDEX);\n        // storage call index\n        prefix[1] = bytes1(MINT_CALL_INDEX);\n\n        // astar target_chain = bytes1(0)\n        return\n            bytes.concat(prefix, abi.encodePacked(caller), token, targetChain);\n    }\n\n    function buildSwapCallBytes(\n        address caller,\n        bytes2 currency_in,\n        bytes2 currency_out,\n        uint128 currency_out_min,\n        bytes memory targetChain\n    ) public pure returns (bytes memory) {\n        bytes memory prefix = new bytes(2);\n        // storage pallet index\n        prefix[0] = bytes1(PALLET_INDEX);\n        // storage call index\n        prefix[1] = bytes1(SWAP_CALL_INDEX);\n\n        // astar target_chain = bytes1(0)\n        return\n            bytes.concat(\n                prefix,\n                abi.encodePacked(caller),\n                currency_in,\n                currency_out,\n                encode_uint128(currency_out_min),\n                targetChain\n            );\n    }\n\n    function buildRedeemCallBytes(\n        address caller,\n        bytes2 vtoken,\n        bytes memory targetChain\n    ) public pure returns (bytes memory) {\n        bytes memory prefix = new bytes(2);\n        // storage pallet index\n        prefix[0] = bytes1(PALLET_INDEX);\n        // storage call index\n        prefix[1] = bytes1(REDEEM_CALL_INDEX);\n\n        // astar target_chain = bytes1(0)\n        return\n            bytes.concat(prefix, abi.encodePacked(caller), vtoken, targetChain);\n    }\n\n    //https://docs.substrate.io/reference/scale-codec/\n    function encode_uint128(uint128 x) internal pure returns (bytes memory) {\n        bytes memory b = new bytes(16);\n        for (uint i = 0; i < 16; i++) {\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\n        }\n        return b;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}